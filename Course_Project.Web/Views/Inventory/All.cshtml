@model IEnumerable<Inventory>
<p class="inventory-created">
    @Localizer["All inventories"]
</p>
<table class="table table-striped table-bordered user-table" id="inventoryTable">
    <thead>
        <tr>
            <th scope="col" data-sortable="true" data-order="asc">@Localizer["Public Id"] <span class="sort-arrow">⇅</span></th>
            <th scope="col" data-sortable="true" data-order="asc">@Localizer["Title"] <span class="sort-arrow">⇅</span></th>
            <th scope="col" data-sortable="true" data-order="asc">@Localizer["Description"] <span class="sort-arrow">⇅</span></th>
            <th scope="col" data-sortable="true" data-order="asc">@Localizer["User name"] <span class="sort-arrow">⇅</span></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var inv in Model)
        {
            <tr data-id="@inv.PublicId">
                <td>@inv.PublicId.ToString()</td>
                <td>@inv.Title</td>
                <td>@inv.Description</td>
                <td>@inv.User.Login</td>
            </tr>
        }
    </tbody>
</table>

<script>
    $(document).ready(function () {
        $('tbody').on('click', 'tr', function () {
            const inv = $(this).data('id');
            window.location.href = '/Inventory/Information/' + inv;
        });

        $('#inventoryTable th[data-sortable="true"]').on('click', function () {
            const th = $(this);
            const colIndex = th.index();


            let order = th.attr('data-order') || 'asc';

            sortTable(colIndex, order);

            const newOrder = order === 'asc' ? 'desc' : 'asc';
            th.attr('data-order', newOrder);


            $('#inventoryTable th[data-sortable="true"]').not(th).attr('data-order', 'asc');
        });
    });

    function sortTable(colIndex, order) {
        const tableBody = $("#inventoryTable tbody");
        const rows = tableBody.find("tr").get();

        rows.sort(function(a, b) {
            let A = $(a).find("td").eq(colIndex).text().trim();
            let B = $(b).find("td").eq(colIndex).text().trim();

            if (colIndex === 0 && !isNaN(A) && !isNaN(B)) {
                A = parseFloat(A);
                B = parseFloat(B);
            } else {

                A = A.toLowerCase();
                B = B.toLowerCase();
            }

            if (A < B) return order === 'asc' ? -1 : 1;
            if (A > B) return order === 'asc' ? 1 : -1;
            return 0;
        });
        tableBody.empty().append(rows);
    }
</script>